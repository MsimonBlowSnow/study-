1.链接查询:
	链接查询:将多张表链到一起进行查询(会导致记录行和字段数列发生改变)
链接查询的意义:
	在关系数据库设计过程中,实体与实体之间是存在很多关系的。
	在关系型数据库表的设计过程中，遵循着关系来设计:一对一，一对多，多对多，通常在实际操作的过程中，需要利用这层关系来保证数据库的完整性。
链接查询:
	1.交叉链接:(返回笛卡尔积)
	交叉连接返回的结果，是被连接的两个表中所有数据行的笛卡尔积，也就是返回第一个表中符合查询条件的数据行数，乘以第二个表中符合查询条件的数据行数
	select * from my_student cross joinmy_int;
		显示:字段是俩张表的所有的字段和
			记录是两张表的记录都匹配一次;(没有意义)

	2.内链接(inner join):
		从一张表中取出数据，和另外一张表中去匹配,
		匹配到保留,进行下一次匹配
		匹配不到，继续向下匹配。
		语法
			默认是内链接可以不用加上inner
		    表一[inner] join 表二 on 匹配条件 
			注意没有on加上条件就是笛卡尔积
		例如:
select * from student as s join score as c on s.studid = c.scid;
	通常使用as取一个表别名
	加上了表别名.字段防止两个表中的字段相同
	3.外链接:
		外链接:outer join 按某一章表作为主表(表中所有的记录都会保留),根据另外一张表按照条件去匹配
		左联链:	left join 左表为主表,
		右链接: right join 右边是主表。
	如果匹配到，保留
	如果没有匹配到: 主表记录保留,从表对应的字段为null
		语法:
	左链接:主表 left join 从表 on 条件
	右链接:主表 right join 从表 on 条件
		select * from student as s left join select * from class as c on s.class_id = c.id;
	显示所有的学生的班级情况，并显示出来。
	应用:
		作为数据获取对应主表以及其他数据(关联)	

uing 关键字
	1.在连接查询时，使用on可以用using代替
	2.使用using的前提是对应的两张表链接字段是同名(类似自然链接自动匹配)
	3.如果使用using关键字,对应的同名字段,最终在结果里面只会保留一个。
	基本语法
		表一[inner|left|right] join 表二 using (同名字段);//链接字段。

